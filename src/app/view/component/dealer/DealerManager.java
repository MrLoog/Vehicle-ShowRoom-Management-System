/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package app.view.component.dealer;

import app.model.Dealer;
import app.service.DealerService;
import app.utility.AppUtility;
import app.view.Main;
import app.view.model.TableDealerModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Date;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kiendv
 */
public class DealerManager extends javax.swing.JPanel {

    AtomicReference<Integer> totalpage = new AtomicReference<Integer>(0);
    int curpage = 1;
    String search = "";
    TableDealerModel model = new TableDealerModel();

    public void setTotalpage(Integer totalpage) {
        this.totalpage.set(totalpage);
        fillPage();
    }

    public void setCurpage(int curpage) {
        this.curpage = curpage;
        fillDataCustomer(curpage);
    }

    private void fillDataCustomer(int page) {
        String pagingsql = "";
        if (search.equals("")) {
            pagingsql = dealerService.BuildPagingSql(dealerService.getTableName(), null, Main.PerPage, page, totalpage);
        } else {
            pagingsql = dealerService.BuildPagingSql(dealerService.getTableName(), dealerService.getConditionSearch(search), Main.PerPage, page, totalpage);
        }
        List<Dealer> lst = dealerService.executeQuery(pagingsql);
        model.setData(lst);
        tableDealer.setModel(model);
        tableDealer.revalidate();
        tableDealer.repaint();
    }

    private int getTotalPage() {
        int temptotal = totalpage.get();
        int temp = temptotal % Main.PerPage;
        if (temp == 0) {
            return (temptotal / Main.PerPage);
        } else {
            return (temptotal / Main.PerPage) + 1;
        }
    }

    private void fillPage() {
        comboDealer.removeAllItems();
        for (int i = 1; i <= getTotalPage(); i++) {
            comboDealer.addItem(i);
        }
        comboDealer.setSelectedItem(curpage);
        comboDealer.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent ie) {
                Object temppage = comboDealer.getSelectedItem();
                if (temppage != null) {
                    setCurpage((Integer) temppage);
                }
            }
        });
        comboDealer.revalidate();
        comboDealer.repaint();
    }

    public void refresh() {
        search = "";
        jtxtsearch.setText(search);
        fillDataCustomer(1);
        fillPage();
    }

    public void reloadData() {
        fillDataCustomer(curpage);
    }

    public Dealer getSelectedDealer() {
        int index = tableDealer.getSelectedRow();
        if (index == -1) {
            return null;
        } else {
            return ((TableDealerModel) tableDealer.getModel()).getData(index);
        }
    }
    DealerService dealerService;

    /**
     * Creates new form DealerManager
     */
    public DealerManager() {
        initComponents();
        dealerService = new DealerService();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableDealer = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        comboDealer = new javax.swing.JComboBox();
        jtxtsearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnUpgrade = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        txtOK = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        tableDealer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableDealer);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 30));
        jPanel1.setLayout(new java.awt.FlowLayout(0));

        comboDealer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboDealerItemStateChanged(evt);
            }
        });
        comboDealer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDealerActionPerformed(evt);
            }
        });
        jPanel1.add(comboDealer);

        jtxtsearch.setMinimumSize(new java.awt.Dimension(30, 20));
        jtxtsearch.setPreferredSize(new java.awt.Dimension(100, 25));
        jPanel1.add(jtxtsearch);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearch);

        btnAdd.setText("New");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdd);

        btnDel.setText("(Un)Lock");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });
        jPanel1.add(btnDel);

        btnUpgrade.setText("(Un) Set Manager");
        btnUpgrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpgradeActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpgrade);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        jPanel1.add(btnRefresh);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        txtOK.setText("...");
        add(txtOK, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        search = jtxtsearch.getText();
        fillDataCustomer(1);
        fillPage();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        final DealerCreateNew dialog = new DealerCreateNew(null, true);
        dialog.setLocationRelativeTo(null);
        dialog.setEditMode(false);
        dialog.setSaveListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                refresh();
                dialog.dispose();
            }
        });
        dialog.setVisible(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpgradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpgradeActionPerformed
        Dealer d = getSelectedDealer();
        if (d == null) {
            JOptionPane.showMessageDialog(null, "Select a row to perform this action.");
            return;
        }
        if ("sa".equals(d.getLoginName())) {
            JOptionPane.showMessageDialog(null, "You don't have permission to perform this action.");
            return;
        }
        if (!"sa".equals(Main.activeUser.getLoginName())) {

            if (!Main.activeUser.isIsManager() || d.isIsManager()) {
                JOptionPane.showMessageDialog(null, "You don't have permission to perform this action.");
                return;
            }
        }
        d.setIsManager(!d.isIsManager());
        Date date = new Date();
        java.sql.Date inputdate = new java.sql.Date(date.getTime());
        d.setModified(inputdate);
        dealerService.update(d);
        JOptionPane.showMessageDialog(null, "Update Success");
        reloadData();
    }//GEN-LAST:event_btnUpgradeActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        // TODO add your handling code here:
        Dealer d = getSelectedDealer();
        if (d == null) {
            JOptionPane.showMessageDialog(null, "Select a row to perform this action.");
            return;
        }
         if ("sa".equals(d.getLoginName())) {
            JOptionPane.showMessageDialog(null, "You don't have permission to perform this action.");
            return;
        }
        if (!"sa".equals(Main.activeUser.getLoginName())) {

            if (!Main.activeUser.isIsManager() || d.isIsManager()) {
                JOptionPane.showMessageDialog(null, "You don't have permission to perform this action.");
                return;
            }
        }
        d.setIsDeleted(!d.isIsDeleted());
        Date date = new Date();
        java.sql.Date inputdate = new java.sql.Date(date.getTime());
        d.setModified(inputdate);
        dealerService.update(d);
        JOptionPane.showMessageDialog(null, "Update Success");
        reloadData();
    }//GEN-LAST:event_btnDelActionPerformed

    private void comboDealerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDealerActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_comboDealerActionPerformed

    private void comboDealerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboDealerItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_comboDealerItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpgrade;
    private javax.swing.JComboBox comboDealer;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jtxtsearch;
    private javax.swing.JTable tableDealer;
    private javax.swing.JLabel txtOK;
    // End of variables declaration//GEN-END:variables
}
