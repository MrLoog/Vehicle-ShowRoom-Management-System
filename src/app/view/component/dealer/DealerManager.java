/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package app.view.component.dealer;

import app.model.Dealer;
import app.service.DealerService;
import app.utility.AppUtility;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kiendv
 */
public class DealerManager extends javax.swing.JPanel {

    float itemsPerPage = 10;
    float total = 0;
    static int cur = 1;
    static boolean isSearch = false;
    DealerService service;
    String kword = "";
    String sql = "exec pagingdealers " + cur + "," + itemsPerPage;
    String getTotal = "";
    int from, to;

    /**
     * Creates new form DealerManager
     */
    public DealerManager() {
        initComponents();
        includeData();
    }

    public void includeData() {
        DefaultTableModel model = new DefaultTableModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            model.removeRow(i);
        }
        if (cur == 0 || cur == -1) {
            cur = 1;
        }
        service = new DealerService();
        if (isSearch) {
            try {
                total = service.executeQuery(getTotal).size();
            } catch (Exception ex) {
                total = 0;
            }
            String[] colName = {""};
            model.setColumnIdentifiers(new String[]{"ID", "Name", "Login Name", "Is Admin"});
            List<Dealer> lst = service.executeQuery(sql);
            if (model == null) {
                model = new DefaultTableModel();
            }
            if (cur > 1) {
                from = Math.round(itemsPerPage * (cur - 1));
                to = Math.round((cur * itemsPerPage));
            } else {
                from = 0;
                to = Math.round(itemsPerPage);
            }
            if (to >= total) {
                to = Math.round(total) - 1;
            }
            if (total < itemsPerPage) {
                from = 0;
                to = to = Math.round(total) - 1;
            }
            if (lst.size() < 2) {
                for (int i = 0; i < lst.size(); i++) {
                    model.addRow(new Object[]{lst.get(i).getId(), lst.get(i).getName(), lst.get(i).getLoginName(), lst.get(i).isIsAdmin()});
                }
            } else {
                for (int i = from; i <= to; i++) {
                    model.addRow(new Object[]{lst.get(i).getId(), lst.get(i).getName(), lst.get(i).getLoginName(), lst.get(i).isIsAdmin()});
                }
            }
            tableDealer.setModel(model);
            paging();
        } else {
            total = service.getAll().size();
            String[] colName = {""};
            model.setColumnIdentifiers(new String[]{"ID", "Name", "Login Name", "Is Admin"});
            List<Dealer> lst = service.executeQuery(sql);
            if (model == null) {
                model = new DefaultTableModel();
            }
            for (int i = 0; i < lst.size(); i++) {
                model.addRow(new Object[]{lst.get(i).getId(), lst.get(i).getName(), lst.get(i).getLoginName(), lst.get(i).isIsAdmin()});
            }
            tableDealer.setModel(model);
            paging();
        }
    }

    public void paging() {
        if (isSearch) {
            comboDealer.removeAllItems();
            comboDealer.addItem("Go to page:");
            float pages = (total / itemsPerPage);
            for (int i = 0; i < pages; i++) {
                comboDealer.addItem(i + 1);
            }
        } else {
            comboDealer.removeAllItems();
            comboDealer.addItem("Go to page:");
            float pages = (total / itemsPerPage);
            for (int i = 0; i < pages; i++) {
                comboDealer.addItem(i + 1);
            }
        }
    }

    public boolean isNumeric(String str) {
        try {
            double d = Double.parseDouble(str);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableDealer = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lbCur = new javax.swing.JLabel();
        comboDealer = new javax.swing.JComboBox();
        txtKeyword = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnUpgrade = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        txtOK = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        tableDealer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableDealer);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 30));
        jPanel1.setLayout(new java.awt.FlowLayout(0));

        lbCur.setText(".");
        jPanel1.add(lbCur);

        comboDealer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboDealer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDealerActionPerformed(evt);
            }
        });
        jPanel1.add(comboDealer);

        txtKeyword.setMinimumSize(new java.awt.Dimension(30, 20));
        txtKeyword.setPreferredSize(new java.awt.Dimension(50, 25));
        jPanel1.add(txtKeyword);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearch);

        btnAdd.setText("New");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdd);

        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });
        jPanel1.add(btnDel);

        btnUpgrade.setText("Update Manager role");
        btnUpgrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpgradeActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpgrade);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        jPanel1.add(btnRefresh);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        txtOK.setText("...");
        add(txtOK, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void comboDealerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDealerActionPerformed
        if (!isSearch) {
            String s = "";
            try {
                s = comboDealer.getSelectedItem().toString();
                cur = Integer.parseInt(s);
                comboDealer.removeItem(comboDealer.getSelectedItem());
            } catch (Exception ex) {
                cur = 1;
            }
            lbCur.setText(cur + "");
            sql = "exec pagingdealers " + cur + "," + itemsPerPage;
            includeData();
        } else {
            String s = "";
            try {
                s = comboDealer.getSelectedItem().toString();
                cur = Integer.parseInt(s);
                comboDealer.removeItem(comboDealer.getSelectedItem());
            } catch (Exception ex) {
                cur = 1;
            }
            lbCur.setText(cur + "");
            String kw = txtKeyword.getText().trim();
            if (isNumeric(kw)) {
                sql = "exec searchdealer '" + kw + "', " + cur + ", " + itemsPerPage + ", 1";
                getTotal = "exec searchdealerall '" + kword + "', 1";
            } else {
                sql = "exec searchdealer '" + kw + "', " + cur + ", " + itemsPerPage + ", 0";
                getTotal = "exec searchdealerall '" + kword + "', 0";
            }
            includeData();
        }
    }//GEN-LAST:event_comboDealerActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String kw = txtKeyword.getText().trim();
        if (kw == "" || kw.equals("") || kw == null || kw.length() < 1) {
            isSearch = false;
            sql = "exec pagingdealers 1," + itemsPerPage;
            includeData();
        } else {
            isSearch = true;
            kword = kw;
            cur = 1;
            if (isNumeric(kw)) {
                sql = "exec searchdealer '" + kw + "', " + cur + ", " + itemsPerPage + ", 1";
                getTotal = "exec searchdealerall '" + kword + "', 1";
            } else {
                sql = "exec searchdealer '" + kw + "', " + cur + ", " + itemsPerPage + ", 0";
                getTotal = "exec searchdealerall '" + kword + "', 0";
            }
            includeData();
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        try {
            int row = tableDealer.getSelectedRow();
            int id = Integer.parseInt(tableDealer.getValueAt(row, 0).toString());
            String name = tableDealer.getValueAt(row, 1).toString();
            int x = JOptionPane.showConfirmDialog(tableDealer, "Do you want to delete: " + name + " (" + id + ")");
            if (x == 0) {
                Dealer c = new Dealer();
                c.setId(id);
                c.setName(name);
                boolean r = service.delete(c);
                if (r) {
                    JOptionPane.showMessageDialog(tableDealer, "Removed: " + name + " (" + id + "), click refresh.");
                } else {
                    JOptionPane.showMessageDialog(tableDealer, "Error, cannot delete " + name, "Error", JOptionPane.ERROR_MESSAGE);
                }
                reload();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(tableDealer, "Please choose item to delete");
        }
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        reload();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        DealerCreateNew newd = new DealerCreateNew(null, isSearch);
        newd.show();
    }//GEN-LAST:event_btnAddActionPerformed
    public void reload(){
        isSearch = false;
        String s = "";
        try {
            s = comboDealer.getSelectedItem().toString();
            cur = Integer.parseInt(s);
            comboDealer.removeItem(comboDealer.getSelectedItem());
        } catch (Exception ex) {
            cur = 1;
        }
        lbCur.setText(cur + "");
        sql = "exec pagingdealers " + cur + "," + itemsPerPage;
        includeData();
    }
    private void btnUpgradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpgradeActionPerformed
        try {
            int row = tableDealer.getSelectedRow();
            int id = Integer.parseInt(tableDealer.getValueAt(row, 0).toString());
            String name = tableDealer.getValueAt(row, 1).toString();
            String loginname = tableDealer.getValueAt(row, 2).toString();
            String status = tableDealer.getValueAt(row, 3).toString();
            int x = -10;
            String up = "false";
            if (status == "true") {
                x = JOptionPane.showConfirmDialog(btnAdd, "Change: " + loginname + " to Normal user?");
                up = "false";
            } else {
                x = JOptionPane.showConfirmDialog(btnAdd, "Set: " + loginname + " to Manager?");
                up = "true";
            }
            if (x == 0) {
                Dealer d = new Dealer();
                d.setId(id);
                d.setName(name);
                d.setLoginName(loginname);
                d.setIsAdmin(true);
                if (service.updaterole(up, id)>0) {
                    txtOK.setText("Changed role of " + loginname + " click REFRESH!");
                } else {
                    JOptionPane.showMessageDialog(btnUpgrade, "Error! Can not upgrade.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            reload();
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_btnUpgradeActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpgrade;
    private javax.swing.JComboBox comboDealer;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCur;
    private javax.swing.JTable tableDealer;
    private javax.swing.JTextField txtKeyword;
    private javax.swing.JLabel txtOK;
    // End of variables declaration//GEN-END:variables
}
