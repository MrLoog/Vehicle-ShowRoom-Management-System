/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package app.view.component.order;

import app.model.Dealer;
import app.model.ImportOrder;
import app.model.Vehicle;
import app.service.DealerService;
import app.service.ImportOrderService;
import app.service.VehicleService;
import app.view.Main;
import app.view.component.order.DialogImportOrderForm;
import app.view.model.TableImportOrderModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class ImportOrderTable extends javax.swing.JPanel {

    private ImportOrderService importOrderService;
    private VehicleService vehicleService;
    private DealerService dealerService;

    /**
     * Creates new form ImportOrderTable
     */
    public ImportOrderTable() {
        initComponents();
        importOrderService = new ImportOrderService();
        vehicleService = new VehicleService();
        dealerService = new DealerService();
        fillData(1);
        fillPage();
    }
    AtomicReference<Integer> totalpage = new AtomicReference<Integer>(0);
    int curpage = 1;
    String search = "";
    TableImportOrderModel model = new TableImportOrderModel();

    public void setTotalpage(Integer totalpage) {
        this.totalpage.set(totalpage);
        fillPage();
    }

    public void setCurpage(int curpage) {
        this.curpage = curpage;
        fillData(curpage);
    }

    private void fillData(int page) {
        String pagingsql = "";
        if (search.equals("")) {
            pagingsql = importOrderService.BuildPagingSql(importOrderService.getTableName(), importOrderService.getConditionSearchWithStatusAndJoin(new ArrayList<Integer>()), Main.PerPage, page, totalpage);
        } else {
            List<Integer> lstVehicle = vehicleService.executeQueryGetListID(vehicleService.getQuerySearchVehicle(search));
            pagingsql = importOrderService.BuildPagingSql(importOrderService.getTableName(), importOrderService.getConditionSearchWithStatusAndJoin(lstVehicle), Main.PerPage, page, totalpage);
        }
        List<ImportOrder> lst = importOrderService.executeQuery(pagingsql);
        for (ImportOrder importOrder : lst) {
            importOrder.setVehicle((Vehicle) vehicleService.getById(importOrder.getVehicleID()));
            importOrder.setDealer((Dealer) dealerService.getById(importOrder.getDealerId()));
            importOrder.setDealerModified((Dealer) dealerService.getById(importOrder.getDealerModifiedID()));
        }
        model.setData(lst);
        jTable1.setModel(model);
        jTable1.revalidate();
        jTable1.repaint();
    }

    private int getTotalPage() {
        int temptotal = totalpage.get();
        int temp = temptotal % Main.PerPage;
        if (temp == 0) {
            return (temptotal / Main.PerPage);
        } else {
            return (temptotal / Main.PerPage) + 1;
        }
    }

    private void fillPage() {
        jComboBox1.removeAllItems();
        for (int i = 1; i <= getTotalPage(); i++) {
            jComboBox1.addItem(i);
        }
        jComboBox1.setSelectedItem(curpage);
        jComboBox1.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent ie) {
                Object temppage = jComboBox1.getSelectedItem();
                if (temppage != null) {
                    setCurpage((Integer) temppage);
                }
            }
        });
        jComboBox1.revalidate();
        jComboBox1.repaint();
    }

    public void reloadTableOrder() {
        search = "";
        jTextField1.setText(search);
        fillData(1);
        fillPage();
    }

    public void reloadData() {
        fillData(curpage);
        fillPage();
    }

    public ImportOrder getSelectedImportOrder() {
        int index = jTable1.getSelectedRow();
        if (index == -1) {
            return null;
        } else {
            return ((TableImportOrderModel) jTable1.getModel()).getData(index);
        }
    }

    public Object getSelectedObject() {
        return getSelectedImportOrder();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jPanel1.add(jComboBox1);

        jTextField1.setPreferredSize(new java.awt.Dimension(100, 25));
        jPanel1.add(jTextField1);

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        jButton3.setText("Edit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        jButton4.setText("Refresh");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        search = jTextField1.getText();
        fillData(1);
        fillPage();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        ImportOrder io = getSelectedImportOrder();
        if (io == null) {
            JOptionPane.showMessageDialog(this, "Don't select a row!");
            return;
        } else {
            final DialogImportOrderForm dialog = new DialogImportOrderForm(null, true);
            dialog.setLocationRelativeTo(null);
            dialog.setModel(io);
            dialog.setEditMode(true);
            dialog.setSaveListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    fillData(curpage);
                    dialog.dispose();
                }
            });
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        search = "";
        jTextField1.setText(search);
        fillData(1);
        fillPage();
    }//GEN-LAST:event_jButton4ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
