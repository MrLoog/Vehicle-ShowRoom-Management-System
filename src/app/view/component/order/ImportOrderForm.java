/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package app.view.component.order;

import app.model.ImportOrder;
import app.model.Vehicle;
import app.service.ImportOrderService;
import app.service.VehicleService;
import app.view.Main;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class ImportOrderForm extends javax.swing.JPanel {
    
    private VehicleService vehicleService;
    private ImportOrderService importOrderService;
    private ImportOrder model;
    private boolean isEdit = false;
    
    public ImportOrder getModel() {
        return model;
    }
    
    public void setModel(ImportOrder model) {
        this.model = model;
        jTextField1.setText(model.getVehicle().getModelNumber());
        jTextField4.setText(model.getPrice().toString());
        jTextField5.setText(model.getQuantity() + "");
    }

    /**
     * Creates new form ImportOrder
     */
    public ImportOrderForm() {
        initComponents();
        vehicleService = VehicleService.getInstance();
        importOrderService = ImportOrderService.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jLabel2.setText("Model Number :");

        jLabel5.setText("Price :");

        jTextField1.setEditable(false);
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });

        jLabel6.setText("Quantity :");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/view/resource/accept.png"))); // NOI18N
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/view/resource/page_refresh.png"))); // NOI18N
        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setForeground(java.awt.Color.red);

        jLabel1.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jButton1))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2)
                            .addComponent(jTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jLabel3)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(58, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void clear() {
        if (isEdit) {
            setModel(model);
        } else {
            Vehicle v = model.getVehicle();
            ImportOrder order = new ImportOrder();
            order.setVehicle(v);
            setModel(order);
        }
    }
    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        // TODO add your handling code here:
//        String modelnumber = jTextField1.getText();
//        List<Vehicle> lst = vehicleService.executeQuery(vehicleService.getByModelNumberQuery(modelnumber));
//        if (lst.size() > 0) {
//            Vehicle vehicle = lst.get(0);
//            setModel(vehicle);
//            setEditMode(true);
//        }
    }//GEN-LAST:event_jTextField1FocusLost
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        createOrder();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_jButton2ActionPerformed
    private void createOrder() {
        if (validateImportOrder()) {
            int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to save?", "Confirm Save", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                int originqt = model.getQuantity();
                loadDataToModel();
                Date date = new Date();
                java.sql.Date inputdate = new java.sql.Date(date.getTime());
                model.setModified(inputdate);
                model.setDealerModifiedID(Main.activeUser.getId());
                Vehicle v = vehicleService.getById(model.getVehicleID());
                if (isEdit && ((v.getQuantity() - originqt + model.getQuantity()) < 0)) {
                    JOptionPane.showMessageDialog(this, "Vehicle in store not enough to edit this order.");
                    return;
                }
                if (isEdit) {
                    importOrderService.update(model);
                    if (originqt != model.getQuantity()) {
                        v.setQuantity(v.getQuantity() - originqt + model.getQuantity());
                        v.setModified(inputdate);
                        vehicleService.update(v);
                    }
                } else {
                    model.setCreated(inputdate);
                    model.setDealerId(Main.activeUser.getId());
                    importOrderService.add(model);
                    v.setQuantity(v.getQuantity() + model.getQuantity());
                    v.setModified(inputdate);
                    vehicleService.update(v);
                }
                JOptionPane.showMessageDialog(this, "Save Order Success.");
                if (saveListener != null) {
                    saveListener.actionPerformed(null);
                }
            }
        }
    }
    
    private void clearMes() {
        jLabel3.setText("");
        jLabel1.setText("");
    }
    
    private boolean validateImportOrder() {
        boolean flag = true;
        clearMes();
        String price = jTextField4.getText();
        if (price.equals("")) {
            jLabel3.setText("Price is required.");
            flag = false;
        } else {
            try {
                int test = Integer.parseInt(price);
                if (test <= 0) {
                    jLabel3.setText("Price need greater 0.");
                    flag = false;
                }
            } catch (NumberFormatException numberFormatException) {
                jLabel3.setText("Price is number.");
                flag = false;
            }
        }
        String quantity = jTextField5.getText();
        if (quantity.equals("")) {
            jLabel1.setText("Quantity is required.");
            flag = false;
        } else {
            try {
                int test = Integer.parseInt(quantity);
                if (test <= 0) {
                    jLabel1.setText("Quantity need greater 0.");
                    flag = false;
                }
            } catch (NumberFormatException numberFormatException) {
                jLabel1.setText("Quantity is number.");
                flag = false;
            }
        }
        return flag;
    }
    
    public void setEditMode(boolean b) {
        isEdit = b;
    }
    
    private void loadDataToModel() {
        if (model == null) {
            return;
        }
        model.setPrice(Integer.parseInt(jTextField4.getText()));
        model.setQuantity(Integer.parseInt(jTextField5.getText()));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

    public void setModel(Vehicle v) {
        ImportOrder o = new ImportOrder();
        o.setVehicleID(v.getId());
        o.setVehicle(v);
        o.setPrice(v.getPrice());
        o.setQuantity(0);
        setModel(o);
    }
    private ActionListener saveListener;
    
    void setSaveListener(ActionListener ls) {
        this.saveListener = ls;
    }
}
